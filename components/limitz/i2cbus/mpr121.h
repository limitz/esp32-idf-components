#pragma once 
#include "i2cbus.h"

// based on https://github.com/Xinyuan-LilyGO/TTGO_TWatch_Library/blob/master/src/MPR121.h

#define MPR121_ADDR 0x5A ///< default I2C address

#define MPR121_THRESHOLD_TOUCH_0 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_1 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_2 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_3 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_4 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_5 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_6 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_7 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_8 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_9 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_A CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH
#define MPR121_THRESHOLD_TOUCH_B CONFIG_LMTZ_I2C_MPR121_THRESHOLD_TOUCH

#define MPR121_THRESHOLD_RELEASE_0 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_1 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_2 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_3 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_4 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_5 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_6 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_7 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_8 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_9 CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_A CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE
#define MPR121_THRESHOLD_RELEASE_B CONFIG_LMTZ_I2C_MPR121_THRESHOLD_RELEASE

enum {
    MPR121_TOUCHSTATUS_L = 0x00,
    MPR121_TOUCHSTATUS_H = 0x01,
    MPR121_FILTDATA_0L = 0x04,
    MPR121_FILTDATA_0H = 0x05,
    MPR121_BASELINE_0 = 0x1E,
    MPR121_MHDR = 0x2B,
    MPR121_NHDR = 0x2C,
    MPR121_NCLR = 0x2D,
    MPR121_FDLR = 0x2E,
    MPR121_MHDF = 0x2F,
    MPR121_NHDF = 0x30,
    MPR121_NCLF = 0x31,
    MPR121_FDLF = 0x32,
    MPR121_NHDT = 0x33,
    MPR121_NCLT = 0x34,
    MPR121_FDLT = 0x35,

    MPR121_TOUCHTH_0 = 0x41,
    MPR121_RELEASETH_0 = 0x42,
    MPR121_DEBOUNCE = 0x5B,
    MPR121_CONFIG1 = 0x5C,
    MPR121_CONFIG2 = 0x5D,
    MPR121_CHARGECURR_0 = 0x5F,
    MPR121_CHARGETIME_1 = 0x6C,
    MPR121_ECR = 0x5E,
    MPR121_AUTOCONFIG0 = 0x7B,
    MPR121_AUTOCONFIG1 = 0x7C,
    MPR121_UPLIMIT = 0x7D,
    MPR121_LOWLIMIT = 0x7E,
    MPR121_TARGETLIMIT = 0x7F,

    MPR121_GPIODIR = 0x76,
    MPR121_GPIOEN = 0x77,
    MPR121_GPIOSET = 0x78,
    MPR121_GPIOCLR = 0x79,
    MPR121_GPIOTOGGLE = 0x7A,

    MPR121_SOFTRESET = 0x80,
};

#pragma pack(push, 1)
typedef struct
{
	uint8_t touch;
	uint8_t release;
} mpr121_threshold_t;
#pragma pack(pop)

typedef struct
{
	i2cdev_t i2c;
	uint16_t touchpoints;

	mpr121_threshold_t thresholds[12];

	uint16_t filtered[12];
	uint16_t baseline[12];
} mpr121_driver_t;


int mpr121_init(mpr121_driver_t* self);
int mpr121_update(mpr121_driver_t* self);
int mpr121_update_baseline(mpr121_driver_t* self);
int mpr121_update_filtered(mpr121_driver_t* self);
int mpr121_deinit(mpr121_driver_t* self);

extern mpr121_driver_t MPR121;
